import { Request, Response } from "express";
import { prisma } from "../config/prisma";
import { encrypt } from "../utils/crypto";
import { safeDecrypt } from "../utils/safeDecrypt";

const toDashed = (d: string) =>
  d.replace(/^(\d{2})(\d{4})(\d{4})(\d{4})(\d{4})$/, "$1-$2-$3-$4-$5");

export const lookupKey = async (req: Request, res: Response) => {
  /* ‚Äî 1. –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥ ‚Äî */
  const raw18 = (req.params.raw || "").replace(/\D/g, "");
  if (raw18.length !== 18)
    return res.status(400).json({ message: "–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ä–æ–≤–Ω–æ 18 —Ü–∏—Ñ—Ä" });

  const raw22 = toDashed(raw18); // xx-xxxx-xxxx-xxxx-xxxx
  const enc18 = encrypt(raw18); // —à–∏—Ñ—Ä ¬´–±–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤¬ª
  const enc22 = encrypt(raw22); // —à–∏—Ñ—Ä ¬´c –¥–µ—Ñ–∏—Å–∞–º–∏¬ª

  /* ‚Äî 2. –∏—â–µ–º –ø—Å–µ–≤–¥–æ–∫–æ–¥ ‚Äî */
  const aliasRow = await prisma.keys_aliases.findFirst({
    where: {
      OR: [
        { code: raw18 }, // –≤–¥—Ä—É–≥ –ª–µ–∂–∏—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤
        { code: raw22 }, // –≤–¥—Ä—É–≥ –ª–µ–∂–∏—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç —Å –¥–µ—Ñ–∏—Å–∞–º–∏
        { code: enc18 }, // hex-—à–∏—Ñ—Ä –±–µ–∑ –¥–µ—Ñ–∏—Å–æ–≤
        { code: enc22 }, // üîë hex-—à–∏—Ñ—Ä —Å –¥–µ—Ñ–∏—Å–∞–º–∏  ‚Üê —ç—Ç–æ–≥–æ —Ä–∞–Ω—å—à–µ –Ω–µ –±—ã–ª–æ
      ],
    },
    include: {
      product_keys: { include: { products: true, keys_aliases: true } },
    },
  });

  /* ‚Äî 3. –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–æ–¥, –∏—â–µ–º —Å–∞–º –∫–ª—é—á (–Ω–∞ —Å–ª—É—á–∞–π –≤–≤–æ–¥–∞ –∫–ª—é—á–∞) ‚Äî */
  const keyRow = await prisma.product_keys.findFirst({
    where: {
      OR: [
        { key_encrypted: encrypt(raw18) }, // hex-—à–∏—Ñ—Ä –∫–ª—é—á–∞ (23-—Å–∏–º–≤.)
        { key_encrypted: raw18 }, // plaintext-–∫–ª—é—á
      ],
    },
    include: { products: true, keys_aliases: true },
  });

  if (!aliasRow && !keyRow)
    return res.status(404).json({ message: "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });

  const productKey = keyRow ?? aliasRow!.product_keys!;
  const alias = aliasRow ?? productKey.keys_aliases[0];

  res.json({
    key_encrypted: safeDecrypt(productKey.key_encrypted),
    code: safeDecrypt(alias.code),
    used: productKey.used,
    product: productKey.products?.name ?? null,
    created_at: productKey.created_at,
    updated_at: productKey.updated_at,
  });
};
