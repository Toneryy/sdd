// backend/src/controllers/staffRights.controller.ts
import { Request, Response } from "express";
import { prisma } from "../config/prisma";

interface AuthenticatedRequest extends Request {
  user?: { sub: string; role: string };
}

/** (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ) —Å–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∫–ª—é—á–µ–π —Ñ–∏—á ‚Äî –ø–æ –∂–µ–ª–∞–Ω–∏—é
 * –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∏ –ø—Ä–∏–Ω—è—Ç—å –ª—é–±–æ–π string
 */
const ALLOWED_FEATURES = new Set<string>([
  "EDIT_MODAL",
  "DELETE_CONFIRMATION",
  "PRODUCTS_PAGE",
  "POSTS_EDITOR",
  "DRAFTS_PAGE",
  "PROMOCODES_PAGE",
  "DATABASES_PAGE",
  "KEYS_LINKING",
  "KEY_CHECK",
  "SUBSCRIPTIONS_PAGE",
  "PRODUCT_KEYS_PAGE",
  
  // –ë–õ–û–ö ¬´–°–ª—É–∂–µ–±–Ω—ã–µ¬ª
  "SERVICE_SECTION",          // –≤–µ—Å—å –±–ª–æ–∫
  "SERVICE_BACKUP",           // –ø—É–Ω–∫—Ç ¬´–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ¬ª
  "SERVICE_REGISTER",         // –ø—É–Ω–∫—Ç ¬´–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è¬ª
  "SERVICE_STAFF_MEMBERS",    // –ø—É–Ω–∫—Ç ¬´–ü–µ—Ä—Å–æ–Ω–∞–ª¬ª
  "SERVICE_STAFF_RIGHTS",     // –ø—É–Ω–∫—Ç ¬´–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞¬ª
]);

// ====== –†–ê–ù–ï–ï –ë–´–õ–û ======
export const listStaffRights = async (req: Request, res: Response) => {
  try {
    const staffRights = await prisma.staff_rights.findMany();
    res.json(staffRights);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞" });
  }
};

// ====== –ü—Ä–∞–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ======
export const listRightsForMe = async (
  req: AuthenticatedRequest,
  res: Response
) => {
  try {
    const staffId = req.user?.sub;
    if (!staffId) return res.sendStatus(401);

    const rights = await prisma.staff_rights.findMany({
      where: { staff_member_id: staffId },
      orderBy: { component_name: "asc" },
      select: {
        id: true,
        staff_member_id: true,
        component_name: true,
        can_access: true,
        role: true,
      },
    });

    res.json(rights);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤ (me)" });
  }
};
// ====== –ù–û–í–û–ï: —Ç–æ–ª—å–∫–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ======
export const listRightsForStaff = async (req: Request, res: Response) => {
  try {
    const { staffId } = req.params;
    const rights = await prisma.staff_rights.findMany({
      where: { staff_member_id: staffId },
      orderBy: { component_name: "asc" },
      select: {
        id: true,
        staff_member_id: true,
        component_name: true,
        can_access: true,
        role: true,
      },
    });
    res.json(rights);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" });
  }
};

// ====== –ù–û–í–û–ï: —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ó–ê–ü–†–ï–¢ (ban) ======
export const banFeature = async (req: Request, res: Response) => {
  try {
    const { staff_member_id, component_name } = req.body as {
      staff_member_id?: string;
      component_name?: string;
    };
    if (!staff_member_id || !component_name) {
      return res
        .status(400)
        .json({ message: "staff_member_id –∏ component_name –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    if (!ALLOWED_FEATURES.has(component_name)) {
      return res.status(400).json({ message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ–∏—á–∞" });
    }

    const exists = await prisma.staff_members.count({
      where: { id: staff_member_id },
    });
    if (!exists) {
      return res.status(404).json({ message: "–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // üîß –≤–º–µ—Å—Ç–æ upsert –ø–æ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–º—É where ‚Äî —Ä—É—á–Ω–∞—è –ª–æ–≥–∏–∫–∞
    const existing = await prisma.staff_rights.findFirst({
      where: { staff_member_id, component_name },
      select: { id: true },
    });

    let rec;
    if (existing) {
      rec = await prisma.staff_rights.update({
        where: { id: existing.id },
        data: { can_access: false, role: null }, // –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–Ω
        select: {
          id: true,
          staff_member_id: true,
          component_name: true,
          can_access: true,
        },
      });
    } else {
      rec = await prisma.staff_rights.create({
        data: {
          staff_member_id,
          component_name,
          can_access: false, // ban = false
          role: null,
        },
        select: {
          id: true,
          staff_member_id: true,
          component_name: true,
          can_access: true,
        },
      });
    }

    return res.status(201).json(rec);
  } catch (err) {
    console.error(err);
    res
      .status(500)
      .json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–µ—Ç–∞" });
  }
};

// ====== –ù–û–í–û–ï: —Å–Ω—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–µ—Ç ======
export const deleteRight = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    await prisma.staff_rights.delete({ where: { id } });
    res.json({ ok: true });
  } catch (err) {
    console.error(err);
    // –µ—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ –±—ã–ª–æ ‚Äî –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 404
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤–∞" });
  }
};

/** –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å/–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ —ç—Ç–æ:
export const createStaffRights = async (req: Request, res: Response) => {
  try {
    const { role, component_name, can_access } = req.body;
    const newStaffRights = await prisma.staff_rights.create({
      data: { role, component_name, can_access },
    });
    res.status(201).json(newStaffRights);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞" });
  }
};
*/
