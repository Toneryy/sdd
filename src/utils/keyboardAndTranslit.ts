// src/utils/keyboardAndTranslit.ts
// üì¶ –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞—Å–∫–ª–∞–¥–∫–∏ + —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏
const enToRuMap: Record<string, string> = {
  q: "–π",
  w: "—Ü",
  e: "—É",
  r: "–∫",
  t: "–µ",
  y: "–Ω",
  u: "–≥",
  i: "—à",
  o: "—â",
  p: "–∑",
  "[": "—Ö",
  "]": "—ä",
  a: "—Ñ",
  s: "—ã",
  d: "–≤",
  f: "–∞",
  g: "–ø",
  h: "—Ä",
  j: "–æ",
  k: "–ª",
  l: "–¥",
  ";": "–∂",
  "'": "—ç",
  z: "—è",
  x: "—á",
  c: "—Å",
  v: "–º",
  b: "–∏",
  n: "—Ç",
  m: "—å",
  ",": "–±",
  ".": "—é",
  "/": ".",
};
const ruToEnMap = Object.fromEntries(
  Object.entries(enToRuMap).map(([en, ru]) => [ru, en])
);
const translitMap: Record<string, string> = {
  –∞: "a",
  –±: "b",
  –≤: "v",
  –≥: "g",
  –¥: "d",
  –µ: "e",
  —ë: "yo",
  –∂: "zh",
  –∑: "z",
  –∏: "i",
  –π: "y",
  –∫: "k",
  –ª: "l",
  –º: "m",
  –Ω: "n",
  –æ: "o",
  –ø: "p",
  —Ä: "r",
  —Å: "s",
  —Ç: "t",
  —É: "u",
  —Ñ: "f",
  —Ö: "kh",
  —Ü: "ts",
  —á: "ch",
  —à: "sh",
  —â: "shch",
  —ä: "",
  —ã: "y",
  —å: "",
  —ç: "e",
  —é: "yu",
  —è: "ya",
};

function convertLayout(text: string, map: Record<string, string>): string {
  return text
    .split("")
    .map((ch) => map[ch] || map[ch.toLowerCase()] || ch)
    .join("");
}

function transliterate(text: string): string {
  return text
    .split("")
    .map((ch) => translitMap[ch] || translitMap[ch.toLowerCase()] || ch)
    .join("");
}

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã:
 * - –∏—Å—Ö–æ–¥–Ω—ã–π
 * - —Å –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω–Ω–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–æ–π en‚Üíru –∏ ru‚Üíen
 * - —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é –∏–∑ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
 */
export function getSearchVariants(text: string): string[] {
  const lower = text.toLowerCase();
  const ru2en = convertLayout(lower, ruToEnMap);
  const en2ru = convertLayout(lower, enToRuMap);
  const tr = transliterate(lower);
  return Array.from(new Set([lower, ru2en, en2ru, tr]));
}
