generator client {
  provider = "prisma-client-js"
  output   = "./src/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id                  String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username            String         @db.VarChar(50)
  email               String         @unique @db.VarChar(100)
  phone               String?        @db.VarChar(20)
  password            String         @db.VarChar
  subscription_id     String?        @db.Uuid
  created_at          DateTime?      @default(now()) @db.Timestamptz(6)
  currentSubscription subscriptions? @relation("CurrentSub", fields: [subscription_id], references: [id], onUpdate: NoAction)

  @@map("users")
}

model subscriptions {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String               @db.VarChar(50)
  duration_days      Int
  price              Decimal              @db.Decimal(10, 2)
  user_subscriptions user_subscriptions[]
  currentUsers       users[]              @relation("CurrentSub")

  @@map("subscriptions")
}

model user_subscriptions {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String        @db.Uuid
  subscription_id String        @db.Uuid
  start_date      DateTime      @db.Date
  end_date        DateTime      @db.Date
  active          Boolean?      @default(false)
  subscriptions   subscriptions @relation(fields: [subscription_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("user_subscriptions")
}

model support_requests {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id     String    @db.Uuid
  title       String    @db.VarChar(255)
  description String?
  status      String?   @db.VarChar(20)
  created_at  DateTime? @default(now()) @db.Timestamp(6)

  @@map("support_requests")
}

model news {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String    @db.VarChar(255)
  body       String?
  created_at DateTime? @default(now()) @db.Timestamp(6)

  @@map("news")
}

model promocodes {
  id                      String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  code                    String        @unique @db.VarChar(50)
  discount                Int
  min_subscription_months Int?
  expires_at              DateTime?     @db.Timestamp(6)
  promo_usage             promo_usage[]

  @@map("promocodes")
}

model promo_usage {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String     @db.Uuid
  promocode_id String     @db.Uuid
  used_at      DateTime?  @default(now()) @db.Timestamp(6)
  promocodes   promocodes @relation(fields: [promocode_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("promo_usage")
}

model service_orders {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id      String    @db.Uuid
  operator_id  String?   @db.Uuid
  service_desc String
  status       String?   @default("pending") @db.VarChar(20)
  created_at   DateTime? @default(now()) @db.Timestamp(6)

  @@map("service_orders")
}
